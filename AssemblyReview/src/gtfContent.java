
import java.awt.Component;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author marie
 */
public class gtfContent extends javax.swing.JPanel {

    /**
     * Creates new form gtfContent
     */
    public gtfContent() {
        initComponents();
        
        //Clear table for new page
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gtfTable = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();

        gtfTable.setBorder(javax.swing.BorderFactory.createTitledBorder("gtf data"));

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Sequence name", "Source", "Feature", "Start", "End", "Score", "Strand", "Frame", "Attribute"
            }
        ));
        gtfTable.setViewportView(jTable1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gtfTable, javax.swing.GroupLayout.DEFAULT_SIZE, 675, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(gtfTable, javax.swing.GroupLayout.PREFERRED_SIZE, 153, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    //Display table on a page
    public void displayTablePage(ArrayList<StringBuffer> textContent, int startLine, int endLine){
        int i;
        //Clear table for new page
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.setRowCount(0);
        
        //Go throught each line of gtf file
        for (i = startLine; i < endLine-1; i++) {
            String[] row;
            //Each line of the gtf file is converted to a table row
            row = contentToString(textContent.get(i));
            addToTable(row);
        }
    }
    
    //Convert a string buffer to a row of table
    private String[] contentToString(StringBuffer rowContent) {
        String rowText = rowContent.toString();
        String[] row;

        //Cells of a row are separated by a tab: separate the row text by tabs
        row = rowText.split("\t");

        return row;
    }
    
    //Add line to table, for gtf file
    private void addToTable(String[] row) {
        int i;

        //Set default table of jTable1
        DefaultTableModel tableModel = (DefaultTableModel) jTable1.getModel();
        tableModel.addRow(row);
        //Resize col 8 (attributes) of table
        setColSize(jTable1, 8);
    }
    
    //Resize colulumn of index colNumber of JTable table
    private void setColSize(JTable table, int colNumber) {
        TableColumn tableCol = table.getColumnModel().getColumn(colNumber); //get desired column

        //Set initial width
        int bestWidth = tableCol.getMinWidth();

        //For each row
        int i;
        for (i = 0; i < table.getRowCount(); i++) {
            //Get component used to draw the cell
            TableCellRenderer render = table.getCellRenderer(i, colNumber);
            //Prepare the renderer of a cell
            Component component = table.prepareRenderer(render, i, colNumber);
            int width;
            //Calculate width
            width = component.getPreferredSize().width + table.getIntercellSpacing().width; //New width is based on preferred width and space of cells
            //The width of the column is the maximal width of all rows
            bestWidth = Math.max(bestWidth, width); //Keep maximal width, i)
        }

        tableCol.setPreferredWidth(bestWidth);
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane gtfTable;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}
