
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
/**
 *
 * @author marie
 */
public class general_statistics extends javax.swing.JPanel {

    /**
     * Creates new form general_statistics
     */
    public general_statistics() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statisticsArea = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createTitledBorder("General statistics"));

        statisticsArea.setBackground(new java.awt.Color(240, 240, 240));
        statisticsArea.setColumns(20);
        statisticsArea.setRows(5);
        statisticsArea.setBorder(null);
        statisticsArea.setEnabled(false);
        jScrollPane1.setViewportView(statisticsArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 343, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 186, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private final int GENOME_SIZE = 5000000;

    //Clear metrics area
    public void clearStatistics() {
        statisticsArea.setText("");
    }

    public void startCalculation(ArrayList<StringBuffer> fileContent, String fileName) {
        //Create instance of statisticsCalculation for methods
        statisticsCalculation Stats = new statisticsCalculation();
        
        //Write file name in statistics area
        statisticsArea.append("Fasta file:" + fileName + "\n");

        //Calculate number of sequences, lenght of sequences, min and max
        int[] statistics = Arrays.copyOf(throughContigs(fileContent, Stats), 6);

        //Display total number of sequences
        statisticsArea.append("Total number of contigs or scaffholds: " + statistics[0] + "\n");

        //Display total length of assembly
        statisticsArea.append("Total length of contigs / scaffold: " + statistics[1] + "\n");
        
        //Display average length
        statisticsArea.append("Average contig or scaffhold length: " + (statistics[1]/statistics[0]) + "\n");

        //Display min and max values
        statisticsArea.append("Shortest contig / scaffold: " + statistics[2] + "\n");
        statisticsArea.append("Longest contig / scaffold: " + statistics[3] + "\n");

        //Display GC content
        double GC = Stats.getGC(fileContent, statistics[1]);
        statisticsArea.append("GC%: " + GC + "\n");

        //Display Ns value
        statisticsArea.append("Ns: " + statistics[4] + "\n");
        //Display N50 value
        statisticsArea.append("N50: " + statistics[5] + "\n");
    }

    //Go trhough each contig to calculate the shortest, longest and the N50
    private int[] throughContigs(ArrayList<StringBuffer> fileContent, statisticsCalculation Stats) {
        
        //Group lines by contigs, remove \n
        ArrayList<String> contigLine = concatFasta(fileContent);

        int[] results = new int[6];
        int numberSequence = 0; //Number of sequences
        int totalLen = 0;
        int nb_Ns = 0; //Number of Ns
        int min = GENOME_SIZE;
        int max = 0;

        int N50 = 0; //N50 value
        //List of length for N50 calculation
        ArrayList<Integer> list_len = new ArrayList<Integer>();

        //For each contig or header
        for (int i = 0; i < contigLine.size(); i++) {
            //Get each line as string
            String line = contigLine.get(i).toString();

            //Refresh number of sequences
            numberSequence = Stats.numberSequence(numberSequence, line);
            //Refresh total length
            totalLen = Stats.lengthSequence(totalLen, line);
            //Count the number of Ns
            nb_Ns = Stats.sumNs(nb_Ns, line);
            //Refresh min and max values
            min = Stats.minSequence(min, line);
            max = Stats.maxSequence(max, line);

            //Calculate list of length
            list_len.add(line.length());
        }
        //Calculate N50 with list of length and total length of sequence
        N50 = Stats.calculateN50(list_len, totalLen);

        //Add results to result list
        results[0] = numberSequence;
        results[1] = totalLen;
        results[2] = min;
        results[3] = max;
        results[4] = nb_Ns;
        results[5] = N50;

        return (results);
    }

    private ArrayList<String> concatFasta(ArrayList<StringBuffer> fileContent) {
        ArrayList<String> sequenceContent = new ArrayList<String>();
        String newLine = "";

        //For each line of the file
        for (int i = 1; i < fileContent.size(); i++) {
            //Get each line of the file and convert to string
            String line = fileContent.get(i).toString();
            //Remove line return
            line.replaceAll("\\n", "");

            if (!line.startsWith(">")) { //Concatenate lines that are not headers
                newLine += line;
            } else { //When header met, save concatenation and header in ArrayList
                sequenceContent.add(newLine);
                sequenceContent.add(line);
                newLine = "";
            }
        }
        return sequenceContent;
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea statisticsArea;
    // End of variables declaration//GEN-END:variables
}
