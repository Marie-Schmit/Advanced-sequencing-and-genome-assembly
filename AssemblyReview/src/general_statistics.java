
import java.util.ArrayList;
import java.util.Arrays;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */

/**
 *
 * @author marie
 */
public class general_statistics extends javax.swing.JPanel {

    /**
     * Creates new form general_statistics
     */
    public general_statistics() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        statisticsArea = new javax.swing.JTextArea();

        setBorder(javax.swing.BorderFactory.createTitledBorder("General statistics"));

        statisticsArea.setBackground(new java.awt.Color(240, 240, 240));
        statisticsArea.setColumns(20);
        statisticsArea.setRows(5);
        statisticsArea.setBorder(null);
        statisticsArea.setEnabled(false);
        jScrollPane1.setViewportView(statisticsArea);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 329, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private final int GENOME_SIZE = 5000000;
    
    //Clear metrics area
    public void clearStatistics(){
        statisticsArea.setText("");
    }
    
    public void startCalculation(ArrayList<StringBuffer> fileContent, String fileName){
        statisticsArea.append("Fasta file:" + fileName + "\n");
        
        //Calculate number of sequences, lenght of sequences, min and max
        int[] statistics = Arrays.copyOf(throughFile(fileContent), 4);
        
        //Display total number of sequences
        statisticsArea.append("Total number of contigs or scaffholds: " + statistics[0] + "\n");
        
        //Display total length of assembly
        statisticsArea.append("Total length of assembly: " + statistics[1] + "\n");
        
        //Display min and max values
        statisticsArea.append("Shortest contig / scaffold: " + statistics[2] + "\n");
        statisticsArea.append("Longest contig / scaffold: " + statistics[3] + "\n");
        
    }
    

    //Calculates number of sequences in the fasta file (passed as ArrayList)
    private int numberSequence(int currentNumber, String line) {
            if (line.startsWith(">")) {
                currentNumber++; //Number of sequence increments
            }
        return (currentNumber);
    }
    
    //Calculates lenght of one contig / scaffhold
    private int lengthSequence(int currentLength, String line) {
            if (!line.startsWith(">")) {
                currentLength += line.length(); //Length of sequence increments
            }
        return (currentLength);
    }
    
    private int minSequence(int currentMin, String line){
        int lenLine = line.length();
        
        //If length is minimal, actualise min value
        if(lenLine < currentMin){
            currentMin = lenLine;
        }
        return(currentMin);
    }
    
    private int maxSequence(int currentMax, String line){
        int lenLine = line.length();
        
        //If length is minimal, actualise min value
        if(lenLine > currentMax){
            currentMax = lenLine;
        }
        return(currentMax);
    }
    
    //Calculates number of sequences in the fasta file (passed as ArrayList)
    private int[] throughFile(ArrayList<StringBuffer> fileContent) {
        int[] results = new int[4];
        
        int numberSequence = 0; //Number of sequences
        int totalLen = 0;
        int min = GENOME_SIZE;
        int max = 0;

        //Check the number of lines starting with > (indicating a new sequence)
        for (int i = 0; i < fileContent.size(); i++) {
            //Get each line of the file and convert to string
            String line = fileContent.get(i).toString();
            
            //Refresh number of sequences
            numberSequence = numberSequence(numberSequence, line);
            //Refresh total length
            totalLen = lengthSequence(totalLen, line);
            //Refresh min and max values
            min = minSequence(min, line);
            max = maxSequence(max, line);
        }
        //Add results to result list
        results[0] = numberSequence;
        results[1] = totalLen;
        results[2] = min;
        results[3] = max;
        
        return (results);
    }
    
    //Calculate N50
    private double calculateN50(){
        double N50 = 0;
        
        
        return N50;
    }
    
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea statisticsArea;
    // End of variables declaration//GEN-END:variables
}
